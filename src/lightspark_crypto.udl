namespace lightspark_crypto {
    [Throws=CryptoError]
    sequence<u8> sign_ecdsa(sequence<u8> msg, sequence<u8> private_key_bytes);

    [Throws=CryptoError]
    boolean verify_ecdsa(sequence<u8> msg, sequence<u8> signature_bytes, sequence<u8> public_key_bytes);

    [Throws=CryptoError]
    sequence<u8> encrypt_ecies(sequence<u8> msg, sequence<u8> public_key_bytes);

    [Throws=CryptoError]
    sequence<u8> decrypt_ecies(sequence<u8> cipher_text, sequence<u8> private_key_bytes);

    [Throws=CryptoError]
    KeyPair generate_keypair();
};

interface KeyPair {
    sequence<u8> get_public_key();
    sequence<u8> get_private_key();
};

[Error]
enum CryptoError {
  "Secp256k1Error",
  "RustSecp256k1Error",
};

[Error]
enum LightsparkSignerError {
  "Bip39Error",
  "Secp256k1Error",
  "KeyDerivationError",
  "KeyTweakError",
  "EntropyLengthError",
};

enum Network {
    "Bitcoin",
    "Testnet",
    "Regtest",
};

interface Mnemonic {
    [Name="random", Throws=LightsparkSignerError]
    constructor();

    [Name="from_entropy", Throws=LightsparkSignerError]
    constructor(sequence<u8> entropy);

    [Name="from_phrase", Throws=LightsparkSignerError]
    constructor(string phrase);

    string as_string();
};

interface Seed {
    constructor(sequence<u8> seed);

    [Name="from_mnemonic"]
    constructor([ByRef] Mnemonic mnemonic);

    sequence<u8> as_bytes();
};

interface InvoiceSignature {
    i32 get_recovery_id();
    sequence<u8> get_signature();
};

interface LightsparkSigner {
    [Throws=LightsparkSignerError]
    constructor([ByRef] Seed seed, Network network);

    [Name="from_bytes", Throws=LightsparkSignerError]
    constructor(sequence<u8> seed, Network network);

    [Throws=LightsparkSignerError]
    string get_master_public_key();

    [Throws=LightsparkSignerError]
    string derive_public_key(string derivation_path);

    [Throws=LightsparkSignerError]
    sequence<u8> ecdh(sequence<u8> public_key);

    [Throws=LightsparkSignerError]
    InvoiceSignature sign_invoice(string unsigned_invoice);

    [Throws=LightsparkSignerError]
    InvoiceSignature sign_invoice_hash(sequence<u8> unsigned_invoice);

    [Throws=LightsparkSignerError]
    sequence<u8> derive_key_and_sign(
        sequence<u8> message,
        string derivation_path,
        boolean is_raw,
        sequence<u8>? add_tweak,
        sequence<u8>? mul_tweak
    );

    [Throws=LightsparkSignerError]
    sequence<u8> get_per_commitment_point(string derivation_path, u64 per_commitment_point_idx);

    [Throws=LightsparkSignerError]
    sequence<u8> release_per_commitment_secret(string derivation_path, u64 per_commitment_point_idx);

    sequence<u8> generate_preimage_nonce();

    [Throws=LightsparkSignerError]
    sequence<u8> generate_preimage(sequence<u8> nonce);

    [Throws=LightsparkSignerError]
    sequence<u8> generate_preimage_hash(sequence<u8> nonce);
};