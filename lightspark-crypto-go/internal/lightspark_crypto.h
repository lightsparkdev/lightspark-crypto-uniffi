

// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!



#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
	// We also try to prevent mixing versions of shared uniffi header structs.
	// If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V6
	#ifndef UNIFFI_SHARED_HEADER_V6
		#error Combining helper code from multiple versions of uniffi is not supported
	#endif // ndef UNIFFI_SHARED_HEADER_V6
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V6
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️

typedef struct RustBuffer {
	int32_t capacity;
	int32_t len;
	uint8_t *data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);

// Task defined in Rust that Go executes
typedef void (*RustTaskCallback)(const void *, int8_t);

// Callback to execute Rust tasks using a Go routine
//
// Args:
//   executor: ForeignExecutor lowered into a uint64_t value
//   delay: Delay in MS
//   task: RustTaskCallback to call
//   task_data: data to pass the task callback
typedef int8_t (*ForeignExecutorCallback)(uint64_t, uint32_t, RustTaskCallback, void *);

typedef struct ForeignBytes {
	int32_t len;
	const uint8_t *data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
	int8_t code;
	RustBuffer errorBuf;
} RustCallStatus;

// Continuation callback for UniFFI Futures
typedef void (*RustFutureContinuation)(void * , int8_t);

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Needed because we can't execute the callback directly from go.
void cgo_rust_task_callback_bridge_lightspark_crypto(RustTaskCallback, const void *, int8_t);

int8_t uniffiForeignExecutorCallbacklightspark_crypto(uint64_t, uint32_t, RustTaskCallback, void*);

void uniffiFutureContinuationCallbacklightspark_crypto(void*, int8_t);

void uniffi_lightspark_crypto_fn_free_invoicesignature(
	void* ptr,
	RustCallStatus* out_status
);

int32_t uniffi_lightspark_crypto_fn_method_invoicesignature_get_recovery_id(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_invoicesignature_get_signature(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_lightspark_crypto_fn_free_keypair(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_keypair_get_private_key(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_keypair_get_public_key(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_lightspark_crypto_fn_free_lightsparksigner(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_constructor_lightsparksigner_from_bytes(
	RustBuffer seed,
	RustBuffer network,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_constructor_lightsparksigner_new(
	void* seed,
	RustBuffer network,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_key_and_sign(
	void* ptr,
	RustBuffer message,
	RustBuffer derivation_path,
	int8_t is_raw,
	RustBuffer add_tweak,
	RustBuffer mul_tweak,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_private_key(
	void* ptr,
	RustBuffer derivation_path,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key(
	void* ptr,
	RustBuffer derivation_path,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key_hex(
	void* ptr,
	RustBuffer derivation_path,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_ecdh(
	void* ptr,
	RustBuffer public_key,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage(
	void* ptr,
	RustBuffer nonce,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_hash(
	void* ptr,
	RustBuffer nonce,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_nonce(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_get_master_public_key(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_get_per_commitment_point(
	void* ptr,
	RustBuffer derivation_path,
	uint64_t per_commitment_point_idx,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_lightsparksigner_release_per_commitment_secret(
	void* ptr,
	RustBuffer derivation_path,
	uint64_t per_commitment_point_idx,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice(
	void* ptr,
	RustBuffer unsigned_invoice,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice_hash(
	void* ptr,
	RustBuffer unsigned_invoice,
	RustCallStatus* out_status
);

void uniffi_lightspark_crypto_fn_free_mnemonic(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_constructor_mnemonic_from_entropy(
	RustBuffer entropy,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_constructor_mnemonic_from_phrase(
	RustBuffer phrase,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_constructor_mnemonic_random(
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_mnemonic_as_string(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_lightspark_crypto_fn_free_seed(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_constructor_seed_from_mnemonic(
	void* mnemonic,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_constructor_seed_new(
	RustBuffer seed,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_method_seed_as_bytes(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_lightspark_crypto_fn_init_callback_validation(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_func_decrypt_ecies(
	RustBuffer cipher_text,
	RustBuffer private_key_bytes,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_func_derive_and_tweak_pubkey(
	RustBuffer pubkey,
	RustBuffer derivation_path,
	RustBuffer add_tweak,
	RustBuffer mul_tweak,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_func_encrypt_ecies(
	RustBuffer msg,
	RustBuffer public_key_bytes,
	RustCallStatus* out_status
);

void* uniffi_lightspark_crypto_fn_func_generate_keypair(
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_func_generate_multisig_address(
	RustBuffer network,
	RustBuffer pk1,
	RustBuffer pk2,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_func_handle_remote_signing_webhook_event(
	RustBuffer webhook_data,
	RustBuffer webhook_signature,
	RustBuffer webhook_secret,
	RustBuffer master_seed_bytes,
	uint64_t validation,
	RustCallStatus* out_status
);

RustBuffer uniffi_lightspark_crypto_fn_func_sign_ecdsa(
	RustBuffer msg,
	RustBuffer private_key_bytes,
	RustCallStatus* out_status
);

int8_t uniffi_lightspark_crypto_fn_func_verify_ecdsa(
	RustBuffer msg,
	RustBuffer signature_bytes,
	RustBuffer public_key_bytes,
	RustCallStatus* out_status
);

RustBuffer ffi_lightspark_crypto_rustbuffer_alloc(
	int32_t size,
	RustCallStatus* out_status
);

RustBuffer ffi_lightspark_crypto_rustbuffer_from_bytes(
	ForeignBytes bytes,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rustbuffer_free(
	RustBuffer buf,
	RustCallStatus* out_status
);

RustBuffer ffi_lightspark_crypto_rustbuffer_reserve(
	RustBuffer buf,
	int32_t additional,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_continuation_callback_set(
	RustFutureContinuation callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_u8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_u8(
	void* handle,
	RustCallStatus* out_status
);

uint8_t ffi_lightspark_crypto_rust_future_complete_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_i8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_i8(
	void* handle,
	RustCallStatus* out_status
);

int8_t ffi_lightspark_crypto_rust_future_complete_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_u16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_u16(
	void* handle,
	RustCallStatus* out_status
);

uint16_t ffi_lightspark_crypto_rust_future_complete_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_i16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_i16(
	void* handle,
	RustCallStatus* out_status
);

int16_t ffi_lightspark_crypto_rust_future_complete_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_u32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_u32(
	void* handle,
	RustCallStatus* out_status
);

uint32_t ffi_lightspark_crypto_rust_future_complete_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_i32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_i32(
	void* handle,
	RustCallStatus* out_status
);

int32_t ffi_lightspark_crypto_rust_future_complete_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_u64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_u64(
	void* handle,
	RustCallStatus* out_status
);

uint64_t ffi_lightspark_crypto_rust_future_complete_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_i64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_i64(
	void* handle,
	RustCallStatus* out_status
);

int64_t ffi_lightspark_crypto_rust_future_complete_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_f32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_f32(
	void* handle,
	RustCallStatus* out_status
);

float ffi_lightspark_crypto_rust_future_complete_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_f64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_f64(
	void* handle,
	RustCallStatus* out_status
);

double ffi_lightspark_crypto_rust_future_complete_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_pointer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_pointer(
	void* handle,
	RustCallStatus* out_status
);

void* ffi_lightspark_crypto_rust_future_complete_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_rust_buffer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

RustBuffer ffi_lightspark_crypto_rust_future_complete_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_poll_void(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_cancel_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_free_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_rust_future_complete_void(
	void* handle,
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_decrypt_ecies(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_derive_and_tweak_pubkey(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_encrypt_ecies(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_generate_keypair(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_generate_multisig_address(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_handle_remote_signing_webhook_event(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_sign_ecdsa(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_func_verify_ecdsa(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_invoicesignature_get_recovery_id(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_invoicesignature_get_signature(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_keypair_get_private_key(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_keypair_get_public_key(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_key_and_sign(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_private_key(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key_hex(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_ecdh(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_hash(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_nonce(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_master_public_key(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_per_commitment_point(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_release_per_commitment_secret(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice_hash(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_mnemonic_as_string(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_seed_as_bytes(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_from_bytes(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_new(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_entropy(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_phrase(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_constructor_mnemonic_random(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_constructor_seed_from_mnemonic(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_constructor_seed_new(
	RustCallStatus* out_status
);

uint16_t uniffi_lightspark_crypto_checksum_method_validation_should_sign(
	RustCallStatus* out_status
);

uint32_t ffi_lightspark_crypto_uniffi_contract_version(
	RustCallStatus* out_status
);


int32_t lightspark_crypto_cgo_Validation(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);

