package internal

/*


// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
	// We also try to prevent mixing versions of shared uniffi header structs.
	// If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
	#ifndef UNIFFI_SHARED_HEADER_V4
		#error Combining helper code from multiple versions of uniffi is not supported
	#endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer {
	int32_t capacity;
	int32_t len;
	uint8_t *data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, RustBuffer, RustBuffer *);

typedef struct ForeignBytes {
	int32_t len;
	const uint8_t *data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
	int8_t code;
	RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

void ffi_lightspark_crypto_9b00_Mnemonic_object_free(
	void* ptr,
	RustCallStatus* out_status
);

void* lightspark_crypto_9b00_Mnemonic_new(
	RustCallStatus* out_status
);

void* lightspark_crypto_9b00_Mnemonic_from_entropy(
	RustBuffer entropy,
	RustCallStatus* out_status
);

void* lightspark_crypto_9b00_Mnemonic_from_phrase(
	RustBuffer phrase,
	RustCallStatus* out_status
);

RustBuffer lightspark_crypto_9b00_Mnemonic_as_string(
	void* ptr,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_9b00_Seed_object_free(
	void* ptr,
	RustCallStatus* out_status
);

void* lightspark_crypto_9b00_Seed_new(
	RustBuffer seed,
	RustCallStatus* out_status
);

void* lightspark_crypto_9b00_Seed_from_mnemonic(
	void* mnemonic,
	RustCallStatus* out_status
);

RustBuffer lightspark_crypto_9b00_Seed_as_bytes(
	void* ptr,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_9b00_LightsparkSigner_object_free(
	void* ptr,
	RustCallStatus* out_status
);

void* lightspark_crypto_9b00_LightsparkSigner_new(
	RustCallStatus* out_status
);

RustBuffer lightspark_crypto_9b00_LightsparkSigner_derive_public_key(
	void* ptr,
	void* seed,
	RustBuffer derivation_path,
	RustCallStatus* out_status
);

RustBuffer lightspark_crypto_9b00_LightsparkSigner_ecdh(
	void* ptr,
	void* seed,
	RustBuffer derivation_path,
	RustBuffer public_key,
	RustCallStatus* out_status
);

RustBuffer lightspark_crypto_9b00_LightsparkSigner_derive_key_and_sign(
	void* ptr,
	void* seed,
	RustBuffer message,
	RustBuffer derivation_path,
	RustBuffer add_tweak,
	RustBuffer mul_tweak,
	RustCallStatus* out_status
);

RustBuffer lightspark_crypto_9b00_LightsparkSigner_build_commitment_secret(
	void* ptr,
	void* seed,
	uint64_t idx,
	RustCallStatus* out_status
);

RustBuffer ffi_lightspark_crypto_9b00_rustbuffer_alloc(
	int32_t size,
	RustCallStatus* out_status
);

RustBuffer ffi_lightspark_crypto_9b00_rustbuffer_from_bytes(
	ForeignBytes bytes,
	RustCallStatus* out_status
);

void ffi_lightspark_crypto_9b00_rustbuffer_free(
	RustBuffer buf,
	RustCallStatus* out_status
);

RustBuffer ffi_lightspark_crypto_9b00_rustbuffer_reserve(
	RustBuffer buf,
	int32_t additional,
	RustCallStatus* out_status
);


*/
import "C"

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"math"
	"runtime"
	"sync/atomic"
	"unsafe"
)

type rustBuffer struct {
	capacity int
	length   int
	data     unsafe.Pointer
	self     C.RustBuffer
}

func fromCRustBuffer(crbuf C.RustBuffer) rustBuffer {
	return rustBuffer{
		capacity: int(crbuf.capacity),
		length:   int(crbuf.len),
		data:     unsafe.Pointer(crbuf.data),
		self:     crbuf,
	}
}

// asByteBuffer reads the full rust buffer and then converts read bytes to a new reader which makes
// it quite inefficient
// TODO: Return an implementation which reads only when needed
func (rb rustBuffer) asReader() *bytes.Reader {
	b := C.GoBytes(rb.data, C.int(rb.length))
	return bytes.NewReader(b)
}

func (rb rustBuffer) asCRustBuffer() C.RustBuffer {
	return C.RustBuffer{
		capacity: C.int(rb.capacity),
		len:      C.int(rb.length),
		data:     (*C.uchar)(unsafe.Pointer(rb.data)),
	}
}

func stringToCRustBuffer(str string) C.RustBuffer {
	b := []byte(str)
	cs := C.CString(str)
	return C.RustBuffer{
		capacity: C.int(len(b)),
		len:      C.int(len(b)),
		data:     (*C.uchar)(unsafe.Pointer(cs)),
	}
}

func (rb rustBuffer) free() {
	rustCall(func(status *C.RustCallStatus) bool {
		C.ffi_lightspark_crypto_9b00_rustbuffer_free(rb.self, status)
		return false
	})
}

type bufLifter[GoType any] interface {
	lift(value C.RustBuffer) GoType
}

type bufLowerer[GoType any] interface {
	lower(value GoType) C.RustBuffer
}

type ffiConverter[GoType any, FfiType any] interface {
	lift(value FfiType) GoType
	lower(value GoType) FfiType
}

type bufReader[GoType any] interface {
	read(reader io.Reader) GoType
}

type bufWriter[GoType any] interface {
	write(writer io.Writer, value GoType)
}

type ffiRustBufConverter[GoType any, FfiType any] interface {
	ffiConverter[GoType, FfiType]
	bufReader[GoType]
}

func lowerIntoRustBuffer[GoType any](bufWriter bufWriter[GoType], value GoType) C.RustBuffer {
	// This might be not the most efficient way but it does not require knowing allocation size
	// beforehand
	var buffer bytes.Buffer
	bufWriter.write(&buffer, value)

	bytes, err := io.ReadAll(&buffer)
	if err != nil {
		panic(fmt.Errorf("reading written data: %w", err))
	}

	return stringToCRustBuffer(string(bytes))
}

func liftFromRustBuffer[GoType any](bufReader bufReader[GoType], rbuf rustBuffer) GoType {
	defer rbuf.free()
	reader := rbuf.asReader()
	item := bufReader.read(reader)
	if reader.Len() > 0 {
		// TODO: Remove this
		leftover, _ := io.ReadAll(reader)
		panic(fmt.Errorf("Junk remaining in buffer after lifting: %s", string(leftover)))
	}
	return item
}

func rustCallWithError[U any](converter bufLifter[error], callback func(*C.RustCallStatus) U) (U, error) {
	var status C.RustCallStatus
	returnValue := callback(&status)
	switch status.code {
	case 0:
		return returnValue, nil
	case 1:
		return returnValue, converter.lift(status.errorBuf)
	case 2:
		// when the rust code sees a panic, it tries to construct a rustbuffer
		// with the message.  but if that code panics, then it just sends back
		// an empty buffer.
		if status.errorBuf.len > 0 {
			panic(fmt.Errorf("%s", FfiConverterstringINSTANCE.lift(status.errorBuf)))
		} else {
			panic(fmt.Errorf("Rust panicked while handling Rust panic"))
		}
	default:
		return returnValue, fmt.Errorf("unknown status code: %d", status.code)
	}
}

func rustCall[U any](callback func(*C.RustCallStatus) U) U {
	returnValue, err := rustCallWithError(nil, callback)
	if err != nil {
		panic(err)
	}
	return returnValue
}

func writeInt8(writer io.Writer, value int8) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeUint8(writer io.Writer, value uint8) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeInt16(writer io.Writer, value int16) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeUint16(writer io.Writer, value uint16) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeInt32(writer io.Writer, value int32) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeUint32(writer io.Writer, value uint32) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeInt64(writer io.Writer, value int64) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeUint64(writer io.Writer, value uint64) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeFloat32(writer io.Writer, value float32) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func writeFloat64(writer io.Writer, value float64) {
	if err := binary.Write(writer, binary.BigEndian, value); err != nil {
		panic(err)
	}
}

func readInt8(reader io.Reader) int8 {
	var result int8
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readUint8(reader io.Reader) uint8 {
	var result uint8
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readInt16(reader io.Reader) int16 {
	var result int16
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readUint16(reader io.Reader) uint16 {
	var result uint16
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readInt32(reader io.Reader) int32 {
	var result int32
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readUint32(reader io.Reader) uint32 {
	var result uint32
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readInt64(reader io.Reader) int64 {
	var result int64
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readUint64(reader io.Reader) uint64 {
	var result uint64
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readFloat32(reader io.Reader) float32 {
	var result float32
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func readFloat64(reader io.Reader) float64 {
	var result float64
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		panic(err)
	}
	return result
}

func init() {

}

type FfiConverteruint8 struct{}

var FfiConverteruint8INSTANCE = FfiConverteruint8{}

func (FfiConverteruint8) lower(value uint8) C.uint8_t {
	return C.uint8_t(value)
}

func (FfiConverteruint8) write(writer io.Writer, value uint8) {
	writeUint8(writer, value)
}

func (FfiConverteruint8) lift(value C.uint8_t) uint8 {
	return uint8(value)
}

func (FfiConverteruint8) read(reader io.Reader) uint8 {
	return readUint8(reader)
}

type FfiDestroyeruint8 struct{}

func (FfiDestroyeruint8) destroy(_ uint8) {}

type FfiConverteruint64 struct{}

var FfiConverteruint64INSTANCE = FfiConverteruint64{}

func (FfiConverteruint64) lower(value uint64) C.uint64_t {
	return C.uint64_t(value)
}

func (FfiConverteruint64) write(writer io.Writer, value uint64) {
	writeUint64(writer, value)
}

func (FfiConverteruint64) lift(value C.uint64_t) uint64 {
	return uint64(value)
}

func (FfiConverteruint64) read(reader io.Reader) uint64 {
	return readUint64(reader)
}

type FfiDestroyeruint64 struct{}

func (FfiDestroyeruint64) destroy(_ uint64) {}

type FfiConverterstring struct{}

var FfiConverterstringINSTANCE = FfiConverterstring{}

func (FfiConverterstring) lift(cRustBuf C.RustBuffer) string {
	reader := fromCRustBuffer(cRustBuf).asReader()
	b, err := io.ReadAll(reader)
	if err != nil {
		panic(fmt.Errorf("reading reader: %w", err))
	}
	return string(b)
}

func (FfiConverterstring) read(reader io.Reader) string {
	length := readInt32(reader)
	buffer := make([]byte, length)
	read_length, err := reader.Read(buffer)
	if err != nil {
		panic(err)
	}
	if read_length != int(length) {
		panic(fmt.Errorf("bad read length when reading string, expected %d, read %d", length, read_length))
	}
	return string(buffer)
}

func (FfiConverterstring) lower(value string) C.RustBuffer {
	return stringToCRustBuffer(value)
}

func (FfiConverterstring) write(writer io.Writer, value string) {
	if len(value) > math.MaxInt32 {
		panic("String is too large to fit into Int32")
	}

	writeInt32(writer, int32(len(value)))
	write_length, err := io.WriteString(writer, value)
	if err != nil {
		panic(err)
	}
	if write_length != len(value) {
		panic(fmt.Errorf("bad write length when writing string, expected %d, written %d", len(value), write_length))
	}
}

type FfiDestroyerstring struct{}

func (FfiDestroyerstring) destroy(_ string) {}

// Below is an implementation of synchronization requirements outlined in the link.
// https://github.com/mozilla/uniffi-rs/blob/0dc031132d9493ca812c3af6e7dd60ad2ea95bf0/uniffi_bindgen/src/bindings/kotlin/templates/ObjectRuntime.kt#L31

type FfiObject struct {
	pointer      unsafe.Pointer
	callCounter  atomic.Int64
	freeFunction func(unsafe.Pointer, *C.RustCallStatus)
	destroyed    atomic.Bool
}

func newFfiObject(pointer unsafe.Pointer, freeFunction func(unsafe.Pointer, *C.RustCallStatus)) FfiObject {
	return FfiObject{
		pointer:      pointer,
		freeFunction: freeFunction,
	}
}

func (ffiObject *FfiObject) incrementPointer(debugName string) unsafe.Pointer {
	for {
		counter := ffiObject.callCounter.Load()
		if counter <= -1 {
			panic(fmt.Errorf("%v object has already been destroyed", debugName))
		}
		if counter == math.MaxInt64 {
			panic(fmt.Errorf("%v object call counter would overflow", debugName))
		}
		if ffiObject.callCounter.CompareAndSwap(counter, counter+1) {
			break
		}
	}

	return ffiObject.pointer
}

func (ffiObject *FfiObject) decrementPointer() {
	if ffiObject.callCounter.Add(-1) == -1 {
		ffiObject.freeRustArcPtr()
	}
}

func (ffiObject *FfiObject) destroy() {
	if ffiObject.destroyed.CompareAndSwap(false, true) {
		if ffiObject.callCounter.Add(-1) == -1 {
			ffiObject.freeRustArcPtr()
		}
	}
}

func (ffiObject *FfiObject) freeRustArcPtr() {
	rustCall(func(status *C.RustCallStatus) int32 {
		ffiObject.freeFunction(ffiObject.pointer, status)
		return 0
	})
}

type LightsparkSigner struct {
	ffiObject FfiObject
}

func NewLightsparkSigner() *LightsparkSigner {

	return FfiConverterLightsparkSignerINSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) unsafe.Pointer {
		return C.lightspark_crypto_9b00_LightsparkSigner_new(_uniffiStatus)
	}))

}

func (_self *LightsparkSigner) DerivePublicKey(seed *Seed, derivationPath string) (string, error) {
	_pointer := _self.ffiObject.incrementPointer("*LightsparkSigner")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeLightsparkSignerError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.lightspark_crypto_9b00_LightsparkSigner_derive_public_key(
			_pointer, FfiConverterSeedINSTANCE.lower(seed), FfiConverterstringINSTANCE.lower(derivationPath), _uniffiStatus)
	})
	if _uniffiErr != nil {
		var _uniffiDefaultValue string
		return _uniffiDefaultValue, _uniffiErr
	} else {
		return FfiConverterstringINSTANCE.lift(_uniffiRV), _uniffiErr
	}

}
func (_self *LightsparkSigner) Ecdh(seed *Seed, derivationPath string, publicKey string) ([]uint8, error) {
	_pointer := _self.ffiObject.incrementPointer("*LightsparkSigner")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeLightsparkSignerError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.lightspark_crypto_9b00_LightsparkSigner_ecdh(
			_pointer, FfiConverterSeedINSTANCE.lower(seed), FfiConverterstringINSTANCE.lower(derivationPath), FfiConverterstringINSTANCE.lower(publicKey), _uniffiStatus)
	})
	if _uniffiErr != nil {
		var _uniffiDefaultValue []uint8
		return _uniffiDefaultValue, _uniffiErr
	} else {
		return FfiConverterSequenceuint8INSTANCE.lift(_uniffiRV), _uniffiErr
	}

}
func (_self *LightsparkSigner) DeriveKeyAndSign(seed *Seed, message []uint8, derivationPath string, addTweak *[]uint8, mulTweak *[]uint8) ([]uint8, error) {
	_pointer := _self.ffiObject.incrementPointer("*LightsparkSigner")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeLightsparkSignerError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.lightspark_crypto_9b00_LightsparkSigner_derive_key_and_sign(
			_pointer, FfiConverterSeedINSTANCE.lower(seed), FfiConverterSequenceuint8INSTANCE.lower(message), FfiConverterstringINSTANCE.lower(derivationPath), FfiConverterOptionalSequenceuint8INSTANCE.lower(addTweak), FfiConverterOptionalSequenceuint8INSTANCE.lower(mulTweak), _uniffiStatus)
	})
	if _uniffiErr != nil {
		var _uniffiDefaultValue []uint8
		return _uniffiDefaultValue, _uniffiErr
	} else {
		return FfiConverterSequenceuint8INSTANCE.lift(_uniffiRV), _uniffiErr
	}

}
func (_self *LightsparkSigner) BuildCommitmentSecret(seed *Seed, idx uint64) []uint8 {
	_pointer := _self.ffiObject.incrementPointer("*LightsparkSigner")
	defer _self.ffiObject.decrementPointer()

	return FfiConverterSequenceuint8INSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.lightspark_crypto_9b00_LightsparkSigner_build_commitment_secret(
			_pointer, FfiConverterSeedINSTANCE.lower(seed), FfiConverteruint64INSTANCE.lower(idx), _uniffiStatus)
	}))

}

func (object *LightsparkSigner) Destroy() {
	runtime.SetFinalizer(object, nil)
	object.ffiObject.destroy()
}

type FfiConverterLightsparkSigner struct{}

var FfiConverterLightsparkSignerINSTANCE = FfiConverterLightsparkSigner{}

func (c FfiConverterLightsparkSigner) lift(pointer unsafe.Pointer) *LightsparkSigner {
	result := &LightsparkSigner{
		newFfiObject(
			pointer,
			func(pointer unsafe.Pointer, status *C.RustCallStatus) {
				C.ffi_lightspark_crypto_9b00_LightsparkSigner_object_free(pointer, status)
			}),
	}
	runtime.SetFinalizer(result, (*LightsparkSigner).Destroy)
	return result
}

func (c FfiConverterLightsparkSigner) read(reader io.Reader) *LightsparkSigner {
	return c.lift(unsafe.Pointer(uintptr(readUint64(reader))))
}

func (c FfiConverterLightsparkSigner) lower(value *LightsparkSigner) unsafe.Pointer {
	// TODO: this is bad - all synchronization from ObjectRuntime.go is discarded here,
	// because the pointer will be decremented immediately after this function returns,
	// and someone will be left holding onto a non-locked pointer.
	pointer := value.ffiObject.incrementPointer("*LightsparkSigner")
	defer value.ffiObject.decrementPointer()
	return pointer
}

func (c FfiConverterLightsparkSigner) write(writer io.Writer, value *LightsparkSigner) {
	writeUint64(writer, uint64(uintptr(c.lower(value))))
}

type FfiDestroyerLightsparkSigner struct{}

func (_ FfiDestroyerLightsparkSigner) destroy(value *LightsparkSigner) {
	value.Destroy()
}

type Mnemonic struct {
	ffiObject FfiObject
}

func NewMnemonic() *Mnemonic {

	return FfiConverterMnemonicINSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) unsafe.Pointer {
		return C.lightspark_crypto_9b00_Mnemonic_new(_uniffiStatus)
	}))

}

func MnemonicFromEntropy(entropy []uint8) (*Mnemonic, error) {

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeLightsparkSignerError{}, func(_uniffiStatus *C.RustCallStatus) unsafe.Pointer {
		return C.lightspark_crypto_9b00_Mnemonic_from_entropy(FfiConverterSequenceuint8INSTANCE.lower(entropy), _uniffiStatus)
	})
	if _uniffiErr != nil {
		var _uniffiDefaultValue *Mnemonic
		return _uniffiDefaultValue, _uniffiErr
	} else {
		return FfiConverterMnemonicINSTANCE.lift(_uniffiRV), _uniffiErr
	}

}
func MnemonicFromPhrase(phrase string) (*Mnemonic, error) {

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeLightsparkSignerError{}, func(_uniffiStatus *C.RustCallStatus) unsafe.Pointer {
		return C.lightspark_crypto_9b00_Mnemonic_from_phrase(FfiConverterstringINSTANCE.lower(phrase), _uniffiStatus)
	})
	if _uniffiErr != nil {
		var _uniffiDefaultValue *Mnemonic
		return _uniffiDefaultValue, _uniffiErr
	} else {
		return FfiConverterMnemonicINSTANCE.lift(_uniffiRV), _uniffiErr
	}

}

func (_self *Mnemonic) AsString() string {
	_pointer := _self.ffiObject.incrementPointer("*Mnemonic")
	defer _self.ffiObject.decrementPointer()

	return FfiConverterstringINSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.lightspark_crypto_9b00_Mnemonic_as_string(
			_pointer, _uniffiStatus)
	}))

}

func (object *Mnemonic) Destroy() {
	runtime.SetFinalizer(object, nil)
	object.ffiObject.destroy()
}

type FfiConverterMnemonic struct{}

var FfiConverterMnemonicINSTANCE = FfiConverterMnemonic{}

func (c FfiConverterMnemonic) lift(pointer unsafe.Pointer) *Mnemonic {
	result := &Mnemonic{
		newFfiObject(
			pointer,
			func(pointer unsafe.Pointer, status *C.RustCallStatus) {
				C.ffi_lightspark_crypto_9b00_Mnemonic_object_free(pointer, status)
			}),
	}
	runtime.SetFinalizer(result, (*Mnemonic).Destroy)
	return result
}

func (c FfiConverterMnemonic) read(reader io.Reader) *Mnemonic {
	return c.lift(unsafe.Pointer(uintptr(readUint64(reader))))
}

func (c FfiConverterMnemonic) lower(value *Mnemonic) unsafe.Pointer {
	// TODO: this is bad - all synchronization from ObjectRuntime.go is discarded here,
	// because the pointer will be decremented immediately after this function returns,
	// and someone will be left holding onto a non-locked pointer.
	pointer := value.ffiObject.incrementPointer("*Mnemonic")
	defer value.ffiObject.decrementPointer()
	return pointer
}

func (c FfiConverterMnemonic) write(writer io.Writer, value *Mnemonic) {
	writeUint64(writer, uint64(uintptr(c.lower(value))))
}

type FfiDestroyerMnemonic struct{}

func (_ FfiDestroyerMnemonic) destroy(value *Mnemonic) {
	value.Destroy()
}

type Seed struct {
	ffiObject FfiObject
}

func NewSeed(seed []uint8) *Seed {

	return FfiConverterSeedINSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) unsafe.Pointer {
		return C.lightspark_crypto_9b00_Seed_new(FfiConverterSequenceuint8INSTANCE.lower(seed), _uniffiStatus)
	}))

}

func SeedFromMnemonic(mnemonic *Mnemonic) *Seed {

	return FfiConverterSeedINSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) unsafe.Pointer {
		return C.lightspark_crypto_9b00_Seed_from_mnemonic(FfiConverterMnemonicINSTANCE.lower(mnemonic), _uniffiStatus)
	}))

}

func (_self *Seed) AsBytes() []uint8 {
	_pointer := _self.ffiObject.incrementPointer("*Seed")
	defer _self.ffiObject.decrementPointer()

	return FfiConverterSequenceuint8INSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.lightspark_crypto_9b00_Seed_as_bytes(
			_pointer, _uniffiStatus)
	}))

}

func (object *Seed) Destroy() {
	runtime.SetFinalizer(object, nil)
	object.ffiObject.destroy()
}

type FfiConverterSeed struct{}

var FfiConverterSeedINSTANCE = FfiConverterSeed{}

func (c FfiConverterSeed) lift(pointer unsafe.Pointer) *Seed {
	result := &Seed{
		newFfiObject(
			pointer,
			func(pointer unsafe.Pointer, status *C.RustCallStatus) {
				C.ffi_lightspark_crypto_9b00_Seed_object_free(pointer, status)
			}),
	}
	runtime.SetFinalizer(result, (*Seed).Destroy)
	return result
}

func (c FfiConverterSeed) read(reader io.Reader) *Seed {
	return c.lift(unsafe.Pointer(uintptr(readUint64(reader))))
}

func (c FfiConverterSeed) lower(value *Seed) unsafe.Pointer {
	// TODO: this is bad - all synchronization from ObjectRuntime.go is discarded here,
	// because the pointer will be decremented immediately after this function returns,
	// and someone will be left holding onto a non-locked pointer.
	pointer := value.ffiObject.incrementPointer("*Seed")
	defer value.ffiObject.decrementPointer()
	return pointer
}

func (c FfiConverterSeed) write(writer io.Writer, value *Seed) {
	writeUint64(writer, uint64(uintptr(c.lower(value))))
}

type FfiDestroyerSeed struct{}

func (_ FfiDestroyerSeed) destroy(value *Seed) {
	value.Destroy()
}

type LightsparkSignerError struct {
	err error
}

func (err LightsparkSignerError) Error() string {
	return fmt.Sprintf("LightsparkSignerError: %s", err.err.Error())
}

func (err LightsparkSignerError) Unwrap() error {
	return err.err
}

// Err* are used for checking error type with `errors.Is`
var ErrLightsparkSignerErrorBip32Error = fmt.Errorf("LightsparkSignerErrorBip32Error")
var ErrLightsparkSignerErrorTweakMustHaveBoth = fmt.Errorf("LightsparkSignerErrorTweakMustHaveBoth")
var ErrLightsparkSignerErrorKeyTweakError = fmt.Errorf("LightsparkSignerErrorKeyTweakError")
var ErrLightsparkSignerErrorEntropyLengthError = fmt.Errorf("LightsparkSignerErrorEntropyLengthError")

// Variant structs
type LightsparkSignerErrorBip32Error struct {
	message string
}

func NewLightsparkSignerErrorBip32Error() *LightsparkSignerError {
	return &LightsparkSignerError{
		err: &LightsparkSignerErrorBip32Error{},
	}
}

func (err LightsparkSignerErrorBip32Error) Error() string {
	return fmt.Sprintf("Bip32Error: %s", err.message)
}

func (self LightsparkSignerErrorBip32Error) Is(target error) bool {
	return target == ErrLightsparkSignerErrorBip32Error
}

type LightsparkSignerErrorTweakMustHaveBoth struct {
	message string
}

func NewLightsparkSignerErrorTweakMustHaveBoth() *LightsparkSignerError {
	return &LightsparkSignerError{
		err: &LightsparkSignerErrorTweakMustHaveBoth{},
	}
}

func (err LightsparkSignerErrorTweakMustHaveBoth) Error() string {
	return fmt.Sprintf("TweakMustHaveBoth: %s", err.message)
}

func (self LightsparkSignerErrorTweakMustHaveBoth) Is(target error) bool {
	return target == ErrLightsparkSignerErrorTweakMustHaveBoth
}

type LightsparkSignerErrorKeyTweakError struct {
	message string
}

func NewLightsparkSignerErrorKeyTweakError() *LightsparkSignerError {
	return &LightsparkSignerError{
		err: &LightsparkSignerErrorKeyTweakError{},
	}
}

func (err LightsparkSignerErrorKeyTweakError) Error() string {
	return fmt.Sprintf("KeyTweakError: %s", err.message)
}

func (self LightsparkSignerErrorKeyTweakError) Is(target error) bool {
	return target == ErrLightsparkSignerErrorKeyTweakError
}

type LightsparkSignerErrorEntropyLengthError struct {
	message string
}

func NewLightsparkSignerErrorEntropyLengthError() *LightsparkSignerError {
	return &LightsparkSignerError{
		err: &LightsparkSignerErrorEntropyLengthError{},
	}
}

func (err LightsparkSignerErrorEntropyLengthError) Error() string {
	return fmt.Sprintf("EntropyLengthError: %s", err.message)
}

func (self LightsparkSignerErrorEntropyLengthError) Is(target error) bool {
	return target == ErrLightsparkSignerErrorEntropyLengthError
}

type FfiConverterTypeLightsparkSignerError struct{}

var FfiConverterTypeLightsparkSignerErrorINSTANCE = FfiConverterTypeLightsparkSignerError{}

func (c FfiConverterTypeLightsparkSignerError) lift(cErrBuf C.RustBuffer) error {
	errBuf := fromCRustBuffer(cErrBuf)
	return liftFromRustBuffer[error](c, errBuf)
}

func (c FfiConverterTypeLightsparkSignerError) lower(value *LightsparkSignerError) C.RustBuffer {
	return lowerIntoRustBuffer[*LightsparkSignerError](c, value)
}

func (c FfiConverterTypeLightsparkSignerError) read(reader io.Reader) error {
	errorID := readUint32(reader)

	message := FfiConverterstringINSTANCE.read(reader)
	switch errorID {
	case 1:
		return &LightsparkSignerError{&LightsparkSignerErrorBip32Error{message}}
	case 2:
		return &LightsparkSignerError{&LightsparkSignerErrorTweakMustHaveBoth{message}}
	case 3:
		return &LightsparkSignerError{&LightsparkSignerErrorKeyTweakError{message}}
	case 4:
		return &LightsparkSignerError{&LightsparkSignerErrorEntropyLengthError{message}}
	default:
		panic(fmt.Sprintf("Unknown error code %d in FfiConverterTypeLightsparkSignerError.read()", errorID))
	}

}

func (c FfiConverterTypeLightsparkSignerError) write(writer io.Writer, value *LightsparkSignerError) {
	switch variantValue := value.err.(type) {
	case *LightsparkSignerErrorBip32Error:
		writeInt32(writer, 1)
	case *LightsparkSignerErrorTweakMustHaveBoth:
		writeInt32(writer, 2)
	case *LightsparkSignerErrorKeyTweakError:
		writeInt32(writer, 3)
	case *LightsparkSignerErrorEntropyLengthError:
		writeInt32(writer, 4)
	default:
		_ = variantValue
		panic(fmt.Sprintf("invalid error value `%v` in FfiConverterTypeLightsparkSignerError.write", value))
	}
}

type FfiConverterOptionalSequenceuint8 struct{}

var FfiConverterOptionalSequenceuint8INSTANCE = FfiConverterOptionalSequenceuint8{}

func (c FfiConverterOptionalSequenceuint8) lift(cRustBuf C.RustBuffer) *[]uint8 {
	return liftFromRustBuffer[*[]uint8](c, fromCRustBuffer(cRustBuf))
}

func (_ FfiConverterOptionalSequenceuint8) read(reader io.Reader) *[]uint8 {
	if readInt8(reader) == 0 {
		return nil
	}
	temp := FfiConverterSequenceuint8INSTANCE.read(reader)
	return &temp
}

func (c FfiConverterOptionalSequenceuint8) lower(value *[]uint8) C.RustBuffer {
	return lowerIntoRustBuffer[*[]uint8](c, value)
}

func (_ FfiConverterOptionalSequenceuint8) write(writer io.Writer, value *[]uint8) {
	if value == nil {
		writeInt8(writer, 0)
	} else {
		writeInt8(writer, 1)
		FfiConverterSequenceuint8INSTANCE.write(writer, *value)
	}
}

type FfiDestroyerOptionalSequenceuint8 struct{}

func (_ FfiDestroyerOptionalSequenceuint8) destroy(value *[]uint8) {
	if value != nil {
		FfiDestroyerSequenceuint8{}.destroy(*value)
	}
}

type FfiConverterSequenceuint8 struct{}

var FfiConverterSequenceuint8INSTANCE = FfiConverterSequenceuint8{}

func (c FfiConverterSequenceuint8) lift(cRustBuf C.RustBuffer) []uint8 {
	return liftFromRustBuffer[[]uint8](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceuint8) read(reader io.Reader) []uint8 {
	length := readInt32(reader)
	if length == 0 {
		return nil
	}
	result := make([]uint8, 0, length)
	for i := int32(0); i < length; i++ {
		result = append(result, FfiConverteruint8INSTANCE.read(reader))
	}
	return result
}

func (c FfiConverterSequenceuint8) lower(value []uint8) C.RustBuffer {
	return lowerIntoRustBuffer[[]uint8](c, value)
}

func (c FfiConverterSequenceuint8) write(writer io.Writer, value []uint8) {
	if len(value) > math.MaxInt32 {
		panic("[]uint8 is too large to fit into Int32")
	}

	writeInt32(writer, int32(len(value)))
	for _, item := range value {
		FfiConverteruint8INSTANCE.write(writer, item)
	}
}

type FfiDestroyerSequenceuint8 struct{}

func (FfiDestroyerSequenceuint8) destroy(sequence []uint8) {
	for _, value := range sequence {
		FfiDestroyeruint8{}.destroy(value)
	}
}
